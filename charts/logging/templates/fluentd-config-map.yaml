apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-configmap-k8s-{{ template "logging.name" . }}-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
data:
  ska.conf: |
    # journald
    <filter docker.systemd>
      @type kubernetes_metadata
      use_journal true
    </filter>

    <match kubelet>
      @type null
    </match>

    <match bootkube>
      @type null
    </match>

    <filter docker.systemd>
      @type record_transformer
      enable_ruby true
      <record>
        kubernetes_namespace ${record["kubernetes"]["namespace_name"]}
      </record>
    </filter>

    <filter docker.systemd>
      @type grep
      <regexp>
        key kubernetes_namespace
        pattern /{{ .Release.Namespace }}/
      </regexp>
    </filter>

    {{ if .Values.fluentd.logging_rate_throttle.enabled }}
    <filter docker.systemd>
      @type throttle
      group_key kubernetes.container_name
      group_bucket_period_s {{ .Values.fluentd.logging_rate_throttle.group_bucket_period_s }}
      group_bucket_limit {{ .Values.fluentd.logging_rate_throttle.group_bucket_limit }}
      group_reset_rate_s {{ .Values.fluentd.logging_rate_throttle.group_reset_rate_s }}
    </filter>
    {{ end }}


    # syslog
    <filter kubernetes.**>
      @type record_transformer
      enable_ruby true
      <record>
        kubernetes_namespace ${record["kubernetes"]["namespace_name"]}
      </record>
    </filter>

    <filter kubernetes.**>
      @type grep
      <regexp>
        key kubernetes_namespace
        pattern /{{ .Release.Namespace }}/
      </regexp>
    </filter>

    {{ if .Values.fluentd.logging_rate_throttle.enabled }}
    <filter kubernetes.**>
      @type throttle
      group_key kubernetes.container_name
      group_bucket_period_s {{ .Values.fluentd.logging_rate_throttle.group_bucket_period_s }}
      group_bucket_limit {{ .Values.fluentd.logging_rate_throttle.group_bucket_limit }}
      group_reset_rate_s {{ .Values.fluentd.logging_rate_throttle.group_reset_rate_s }}
    </filter>
    {{ end }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-configmap-fluent-{{ template "logging.name" . }}-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
data:
  fluent.conf: |

    @include "#{ENV['FLUENTD_SYSTEMD_CONF'] || 'systemd'}.conf"
    @include "#{ENV['FLUENTD_PROMETHEUS_CONF'] || 'prometheus'}.conf"
    @include kubernetes.conf
    @include conf.d/*.conf

    <match **>
      @type elasticsearch
      @id out_es
      @log_level info
      include_tag_key true
      host "#{ENV['FLUENT_ELASTICSEARCH_HOST']}"
      port "#{ENV['FLUENT_ELASTICSEARCH_PORT']}"
      path "#{ENV['FLUENT_ELASTICSEARCH_PATH']}"
      scheme "#{ENV['FLUENT_ELASTICSEARCH_SCHEME'] || 'http'}"
      ssl_verify "#{ENV['FLUENT_ELASTICSEARCH_SSL_VERIFY'] || 'true'}"
      ssl_version "#{ENV['FLUENT_ELASTICSEARCH_SSL_VERSION'] || 'TLSv1'}"
      user "#{ENV['FLUENT_ELASTICSEARCH_USER']}"
      password "#{ENV['FLUENT_ELASTICSEARCH_PASSWORD']}"
      reload_connections "#{ENV['FLUENT_ELASTICSEARCH_RELOAD_CONNECTIONS'] || 'false'}"
      reconnect_on_error "#{ENV['FLUENT_ELASTICSEARCH_RECONNECT_ON_ERROR'] || 'true'}"
      reload_on_failure "#{ENV['FLUENT_ELASTICSEARCH_RELOAD_ON_FAILURE'] || 'true'}"
      log_es_400_reason "#{ENV['FLUENT_ELASTICSEARCH_LOG_ES_400_REASON'] || 'false'}"
      logstash_prefix "#{ENV['FLUENT_ELASTICSEARCH_LOGSTASH_PREFIX'] || 'logstash'}"
      logstash_format "#{ENV['FLUENT_ELASTICSEARCH_LOGSTASH_FORMAT'] || 'true'}"
      index_name "#{ENV['FLUENT_ELASTICSEARCH_LOGSTASH_INDEX_NAME'] || 'logstash'}"
      type_name "#{ENV['FLUENT_ELASTICSEARCH_LOGSTASH_TYPE_NAME'] || 'fluentd'}"
      pipeline ska_log_parsing_pipeline
      <buffer>
        flush_thread_count "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_FLUSH_THREAD_COUNT'] || '8'}"
        flush_interval "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_FLUSH_INTERVAL'] || '5s'}"
        chunk_limit_size "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_CHUNK_LIMIT_SIZE'] || '2M'}"
        queue_limit_length "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_QUEUE_LIMIT_LENGTH'] || '32'}"
        retry_max_interval "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_RETRY_MAX_INTERVAL'] || '30'}"
        retry_forever true
      </buffer>
    </match>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-configmap-systemd-{{ template "logging.name" . }}-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
data:
  systemd.conf: |

    <source>
      @type systemd
      @id in_systemd_kubelet
      matches [{ "_SYSTEMD_UNIT": "kubelet.service" }]
      <entry>
        fields_strip_underscores true
      </entry>
      read_from_head false
      tag kubelet
    </source>

    <source>
      @type systemd
      @id in_systemd_docker
      matches [{ "_SYSTEMD_UNIT": "docker.service" }]
      <entry>
        fields_strip_underscores true
      </entry>
      read_from_head false
      tag docker.systemd
    </source>

    <source>
      @type systemd
      @id in_systemd_bootkube
      matches [{ "_SYSTEMD_UNIT": "bootkube.service" }]
      <entry>
        fields_strip_underscores true
      </entry>
      read_from_head false
      tag bootkube
    </source>

