{{ if .Values.jupyter.enabled }}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jupyter-main-ing-{{ template "oet.name" . }}-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  annotations:
      kubernetes.io/ingress.class: traefik
spec:
# {{ if .Values.ingress.tls.enabled }}
#   tls:
#     - hosts:
#       - {{ tpl .Values.ingress.hostname . }}
#       secretName: {{ tpl .Values.ingress.tls.secretname . }}
# {{ end }}
  rules:
    - host: jupyter-{{ tpl .Values.ingress.hostname . }}
      http:
        paths:
        - path: /
          backend:
           serviceName: jupyter-{{ template "oet.name" . }}-{{ .Release.Name }}
           servicePort: 8888
---
apiVersion: v1
data:
  jupyter_notebook_config.json: |-
    {
        "NotebookApp": {
          "password": "sha1:a83c43c88b88:980ac02521dcf9f62f610e26b051f157c05a36fe"
        }
      }
kind: ConfigMap
metadata:
  name: jupyter-configmap
  namespace: integration
---
apiVersion: v1
kind: Service
metadata:
  name: jupyter-{{ template "oet.name" . }}-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: jupyter-{{ template "oet.name" . }}-{{ .Release.Name }}
    chart: {{ template "oet.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: NodePort
  ports:
    - protocol: TCP
      port: 8888
      nodePort: {{ .Values.jupyter.nodePort }}
  selector:
    app: jupyter-{{ template "oet.name" . }}-{{ .Release.Name }}
---
{{if .Values.jupyter.storage.enabled}}
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jupyter-storage-pv
  namespace: {{ .Release.Namespace }}
  labels:
    type: jupyter_storage
    app: jupyter-{{ template "oet.name" . }}-{{ .Release.Name }}
spec:
  storageClassName: jupyter
  capacity:
    storage: {{ .Values.jupyter.storage.capacity }}
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "{{ .Values.jupyter.storage.hostPath }}"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jupyter-storage-pvc
  namespace: {{ .Release.Namespace }}
  labels:
    type: jupyter_storage
    app: jupyter-{{ template "oet.name" . }}-{{ .Release.Name }}
spec:
  storageClassName: jupyter
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.jupyter.storage.capacity }}
{{end}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyter-configmap-{{ template "oet.name" .}}-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
data:
  environment: |
    TANGO_HOST=databaseds-tango-base-{{ .Release.Name }}:10000
  venv.sh: |
    export PATH="/venv/bin:${PATH}"
    export OET_REST_URI=http://rest-{{ template "oet.name" . }}-{{ .Release.Name }}:5000/api/v1.0/procedures
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jupyter-{{ template "oet.name" . }}-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: jupyter-{{ template "oet.name" . }}-{{ .Release.Name }}
    chart: {{ template "oet.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: jupyter-{{ template "oet.name" . }}-{{ .Release.Name }}
  serviceName: jupyter-{{ template "oet.name" . }}-{{ .Release.Name }}
  replicas: 1
  template:
    metadata:
      labels:
        app: jupyter-{{ template "oet.name" . }}-{{ .Release.Name }}
        chart: {{ template "oet.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    spec:
      volumes:
        - name: jupyter-configmap-volume
          configMap:
            name: jupyter-configmap-{{ template "oet.name" .}}-{{ .Release.Name }}
            items:
            - key: environment
              path: environment
            - key: venv.sh
              path: venv.sh
        - name: storage
          persistentVolumeClaim:
            claimName: jupyter-storage-pvc
        - name: config
          configMap:
            name: jupyter-configmap
        - name: workdir
          emptyDir: {}
      initContainers:
      - name: check-databaseds-ready
        volumeMounts: 
        - name: workdir
          mountPath: /temp
        - name: config
          mountPath: /config
        image: "{{ .Values.jupyter.image.registry }}/{{ .Values.jupyter.image.image }}:{{ .Values.jupyter.image.tag }}"
        command: ["/bin/sh","-c"]
        args: ["/usr/local/bin/wait-for-it.sh databaseds-tango-base-{{ .Release.Name }}:10000 --timeout=30 --strict -- echo databaseds ready && cp /config/* /temp/"]
      containers:
      - name: oet-jupyter
        image: "{{ .Values.jupyter.image.registry }}/{{ .Values.jupyter.image.image }}:{{ .Values.jupyter.image.tag }}"
        imagePullPolicy: {{ .Values.jupyter.image.pullPolicy }}
        ports:
          - name: oet-jupyter
            containerPort: 8888
        env:
          - name: TANGO_HOST
            value: databaseds-tango-base-{{ .Release.Name }}:10000
          - name: SHELL
            value: /bin/bash
          - name: OET_REST_URI
            value: http://rest-{{ template "oet.name" . }}-{{ .Release.Name }}:5000/api/v1.0/procedures
        volumeMounts:
          - name: storage
            mountPath: /app/jupyter_storage
          - name: workdir
            mountPath: /home/tango/.jupyter
          - name: jupyter-configmap-volume
            mountPath: /etc/environment
            subPath: environment
          - name: jupyter-configmap-volume
            mountPath: /etc/profile.d/venv.sh
            subPath: venv.sh
        readinessProbe:
          tcpSocket:
            port: 8888
          initialDelaySeconds: {{ .Values.jupyter.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.jupyter.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.jupyter.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.jupyter.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.jupyter.readinessProbe.failureThreshold }}
        livenessProbe:
          tcpSocket:
            port: 8888
          initialDelaySeconds: {{ .Values.jupyter.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.jupyter.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.jupyter.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.jupyter.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.jupyter.livenessProbe.failureThreshold }}
      restartPolicy: Always
      resources:
  {{ toYaml .Values.rest.resources | indent 10 }}
  {{- with .Values.nodeSelector }}
nodeSelector:
  {{ toYaml . | indent 8 }}
  {{- end }}
  {{- with .Values.affinity }}
affinity:
  {{ toYaml . | indent 8 }}
  {{- end }}
  {{- with .Values.tolerations }}
tolerations:
  {{ toYaml . | indent 8 }}
  {{- end }}
  {{ end }}
